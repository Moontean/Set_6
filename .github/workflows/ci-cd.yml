name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker images
        run: |
          docker-compose build

      - name: Run Docker containers
        run: |
          docker-compose up -d
          docker ps -a  # Диагностика запущенных контейнеров

      - name: Check container logs
        run: |
          echo "Client logs:"
          docker logs todo-list-client-1 || echo "Failed to get client logs"
          echo "Server logs:"
          docker logs todo-list-server-1 || echo "Failed to get server logs"
          echo "Database logs:"
          docker logs todo-list-db-1 || echo "Failed to get database logs"

      - name: Test application endpoints
        run: |
          sleep 120  # Увеличим время ожидания до 120 секунд
          docker run --rm --network container:client curlimages/curl -v --connect-timeout 10 http://client:3000 || { echo "Client endpoint failed"; exit 1; }
          docker run --rm --network container:server curlimages/curl -v --connect-timeout 10 http://server:5000/api/tasks || { echo "Tasks API failed"; exit 1; }
          docker run --rm --network container:server curlimages/curl -v --connect-timeout 10 -X POST -H "Content-Type: application/json" -d '{"to":"test@example.com","subject":"Test","text":"Test email"}' http://server:5000/api/email/send || { echo "Email API failed"; exit 1; }

      - name: Stop and clean containers
        if: always()
        run: |
          docker-compose down -v
          docker image prune -f

      - name: Tag and push images to Docker Hub
        run: |
          docker tag todo-list-server localhost:5000/todo-list-server:latest
          docker tag todo-list-client localhost:3000/todo-list-client:latest
          docker tag todo-list-server ${{ secrets.DOCKERHUB_USERNAME }}/todo-list-server:latest
          docker tag todo-list-client ${{ secrets.DOCKERHUB_USERNAME }}/todo-list-client:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-list-server:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-list-client:latest